{"/home/travis/build/npmtest/node-npmtest-browserify-hmr/test.js":"/* istanbul instrument in package npmtest_browserify_hmr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/lib.npmtest_browserify_hmr.js":"/* istanbul instrument in package npmtest_browserify_hmr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify_hmr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify_hmr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify-hmr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify_hmr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify_hmr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify_hmr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browserify_hmr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify_hmr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browserify_hmr.__dirname + '/lib.npmtest_browserify_hmr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/node_modules/browserify-hmr/index.js":"'use strict';\n\nvar path = require('path');\nvar cproc = require('child_process');\nvar through = require('through2');\nvar convert = require('convert-source-map');\nvar EventEmitter = require('events').EventEmitter;\nvar sm = require('source-map');\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar RSVP = require('rsvp');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar has = require('./lib/has');\nvar readline = require('readline');\nvar synchd = require('synchd');\n\nfunction hashStr(str) {\n  var hasher = crypto.createHash('sha256');\n  hasher.update(str);\n  return hasher.digest('base64').slice(0, 20);\n}\n\nvar readManagerTemplate = _.once(function() {\n  return readFile(path.join(__dirname, 'hmr-manager-template.js'), 'utf8');\n});\n\nvar validUpdateModes = ['websocket', 'ajax', 'fs', 'none'];\nvar updateModesNeedingUrl = ['ajax'];\n\nfunction makeIdentitySourceMap(content, resourcePath) {\n  var map = new sm.SourceMapGenerator();\n  map.setSourceContent(resourcePath, content);\n  content.split('\\n').map(function(line, index) {\n    map.addMapping({\n      source: resourcePath,\n      original: {\n        line: index+1,\n        column: 0\n      },\n      generated: {\n        line: index+1,\n        column: 0\n      }\n    });\n  });\n  return map.toJSON();\n}\n\nfunction readOpt(opts, long, short, defval) {\n  return has(opts, long) ? opts[long] : (short && has(opts, short)) ? opts[short] : defval;\n}\n\nfunction boolOpt(value) {\n  return Boolean(value && value !== 'false');\n}\n\nmodule.exports = function(bundle, opts) {\n  if (!opts) opts = {};\n  var updateMode = readOpt(opts, 'mode', 'm', 'websocket');\n  if (updateMode === 'xhr') {\n    console.warn('Use update mode \"ajax\" instead of \"xhr\".');\n    updateMode = 'ajax';\n  }\n  var updateUrl = readOpt(opts, 'url', 'u', null);\n  var port = readOpt(opts, 'port', 'p', 3123);\n  var hostname = readOpt(opts, 'hostname', 'h', 'localhost');\n  var updateCacheBust = boolOpt(readOpt(opts, 'cacheBust', 'b', false));\n  var bundleKey = readOpt(opts, 'key', 'k', updateMode+':'+updateUrl);\n  var cert = readOpt(opts, 'tlscert', 'C', null);\n  var key = readOpt(opts, 'tlskey', 'K', null);\n  var tlsoptions = opts.tlsoptions;\n  var supportModes = (opts.supportModes && opts.supportModes._) || opts.supportModes || [];\n  var noServe = boolOpt(readOpt(opts, 'noServe', null, false));\n  var ignoreUnaccepted = boolOpt(readOpt(opts, 'ignoreUnaccepted', null, true));\n\n  var basedir = opts.basedir !== undefined ? opts.basedir : process.cwd();\n  var em = new EventEmitter();\n\n  supportModes = _.uniq(['none', updateMode].concat(supportModes));\n\n  supportModes.forEach(function(updateMode) {\n    if (!_.includes(validUpdateModes, updateMode)) {\n      throw new Error(\"Invalid mode \"+updateMode);\n    }\n  });\n  if (!updateUrl && _.includes(updateModesNeedingUrl, updateMode)) {\n    throw new Error(\"url option must be specified for \"+updateMode+\" mode\");\n  }\n\n  var incPath = './'+path.relative(basedir, require.resolve('./inc/index'));\n\n  var sioPath = null;\n  if (_.includes(supportModes, 'websocket')) {\n    sioPath = './'+path.relative(basedir, require.resolve('socket.io-client'));\n  }\n\n  var useLocalSocketServer = !noServe && _.includes(supportModes, 'websocket');\n\n  var server;\n  var serverCommLock = {};\n  var nextServerConfirm = RSVP.defer();\n  function sendToServer(data) {\n    return new RSVP.Promise(function(resolve, reject) {\n      server.stdio[3].write(JSON.stringify(data), function(err) {\n        if (err) return reject(err);\n        server.stdio[3].write('\\n', function(err) {\n          if (err) return reject(err);\n          resolve();\n        });\n      });\n    });\n  }\n  var runServer = _.once(function() {\n    // Start a new process with an extra socket opened to it.\n    // See https://github.com/nodejs/node-v0.x-archive/issues/5727 for a\n    // description. It's faster than using `process.send`.\n    server = cproc.spawn(\n      process.argv[0],\n      [__dirname+'/socket-server.js'],\n      { stdio: ['inherit','inherit','inherit','pipe'] }\n    );\n    var childReadline = readline.createInterface({\n      input: server.stdio[3],\n      output: process.stdout,\n      terminal: false\n    });\n    childReadline.on('line', function(line) {\n      var msg = JSON.parse(line);\n      if (msg.type === 'confirmNewModuleData') {\n        nextServerConfirm.resolve();\n        nextServerConfirm = RSVP.defer();\n      } else {\n        console.warn('[HMR builder] Unknown message type from server:', msg.type);\n      }\n    });\n    server.stdio[3].on('finish', function() {\n      em.emit('error', new Error(\"Browserify-HMR lost connection to socket server\"));\n    });\n    return new RSVP.Promise(function(resolve, reject) {\n      var readJobs = [];\n      if (cert) {\n        readJobs.push(readFile(cert, 'utf8').then(function(data) {\n          tlsoptions = tlsoptions || {};\n          tlsoptions.cert = data;\n        }));\n      }\n      if (key) {\n        readJobs.push(readFile(key, 'utf8').then(function(data) {\n          tlsoptions = tlsoptions || {};\n          tlsoptions.key = data;\n        }));\n      }\n      if (readJobs.length) {\n        resolve(RSVP.Promise.all(readJobs));\n      } else {\n        resolve();\n      }\n    }).then(function(){\n      return sendToServer({\n        type: 'config',\n        hostname: hostname,\n        port: port,\n        tlsoptions: tlsoptions\n      });\n    });\n  });\n\n  var currentModuleData = {};\n\n  function setNewModuleData(moduleData) {\n    if (!useLocalSocketServer) {\n      return RSVP.Promise.resolve();\n    }\n    return runServer().then(function() {\n      var newModuleData = _.chain(moduleData)\n        .toPairs()\n        .filter(function(pair) {\n          return pair[1].isNew;\n        })\n        .map(function(pair) {\n          return [pair[0], {\n            index: pair[1].index,\n            hash: pair[1].hash,\n            source: pair[1].source,\n            parents: pair[1].parents,\n            deps: pair[1].deps\n          }];\n        })\n        .fromPairs()\n        .value();\n      var removedModules = _.chain(currentModuleData)\n        .keys()\n        .filter(function(name) {\n          return !has(moduleData, name);\n        })\n        .value();\n      currentModuleData = moduleData;\n\n      // This following block talking to the server should execute serially,\n      // never concurrently.\n      return synchd.synchd(serverCommLock, function() {\n        // Don't send all of the module data over at once. Send it piece by\n        // piece. The socket server won't apply the changes until it gets the\n        // type:\"removedModules\" message.\n        return Object.keys(newModuleData).reduce(function(promise, name) {\n          return promise.then(function() {\n            return sendToServer({\n              type: 'newModule',\n              name: name,\n              data: newModuleData[name]\n            });\n          });\n        }, RSVP.Promise.resolve()).then(function() {\n          return sendToServer({\n            type: 'removedModules',\n            removedModules: removedModules\n          });\n        });\n      }).then(function() {\n        // Waiting for the response doesn't need to be in the exclusive section.\n        return nextServerConfirm.promise;\n      });\n    });\n  }\n\n  function fileKey(filename) {\n    return path.relative(basedir, filename);\n  }\n\n  var hmrManagerFilename;\n\n  // keys are filenames, values are {hash, transformedSource}\n  var transformCache = {};\n\n  function setupPipelineMods() {\n    var originalEntries = [];\n    bundle.pipeline.get('record').push(through.obj(function(row, enc, next) {\n      if (row.entry) {\n        originalEntries.push(row.file);\n        next(null);\n      } else {\n        next(null, row);\n      }\n    }, function(next) {\n      var source = [sioPath, incPath].filter(Boolean).concat(originalEntries).map(function(name) {\n        return 'require('+JSON.stringify(name)+');\\n';\n      }).join('');\n\n      // Put the hmr file name in basedir to prevent this:\n      // https://github.com/babel/babelify/issues/85\n      hmrManagerFilename = path.join(basedir, '__hmr_manager.js');\n      this.push({\n        entry: true,\n        expose: false,\n        basedir: undefined,\n        file: hmrManagerFilename,\n        id: hmrManagerFilename,\n        source: source,\n        order: 0\n      });\n      next();\n    }));\n\n    var moduleMeta = {};\n\n    function makeModuleMetaEntry(name) {\n      if (!has(moduleMeta, name)) {\n        moduleMeta[name] = {\n          index: null,\n          hash: null,\n          parents: []\n        };\n      }\n    }\n\n    bundle.pipeline.get('deps').push(through.obj(function(row, enc, next) {\n      if (row.file !== hmrManagerFilename) {\n        makeModuleMetaEntry(fileKey(row.file));\n        _.forOwn(row.deps, function(name, ref) {\n          // dependencies that aren't included in the bundle have the name false\n          if (name) {\n            makeModuleMetaEntry(fileKey(name));\n            moduleMeta[fileKey(name)].parents.push(fileKey(row.file));\n          }\n        });\n      }\n      next(null, row);\n    }));\n\n    var moduleData = {};\n    var newTransformCache = {};\n    var managerRow = null;\n    var rowBuffer = [];\n\n    if (bundle.pipeline.get('dedupe').length > 1) {\n      console.warn(\"[HMR] Warning: other plugins have added dedupe transforms. This may interfere.\");\n    }\n    // Disable dedupe transforms because it screws with our change tracking.\n    bundle.pipeline.splice('dedupe', 1, through.obj());\n\n    bundle.pipeline.get('label').push(through.obj(function(row, enc, next) {\n      if (row.file === hmrManagerFilename) {\n        managerRow = row;\n        next(null);\n      } else {\n        // row.id used when fullPaths flag is used\n        moduleMeta[fileKey(row.file)].index = has(row, 'index') ? row.index : row.id;\n\n        var hash = moduleMeta[fileKey(row.file)].hash = hashStr(row.source);\n        var originalSource = row.source;\n        var isNew, thunk;\n        if (has(transformCache, row.file) && transformCache[row.file].hash === hash) {\n          isNew = false;\n          row.source = transformCache[row.file].transformedSource;\n          newTransformCache[row.file] = transformCache[row.file];\n          thunk = _.constant(row);\n        } else {\n          isNew = true;\n          thunk = function() {\n            var header = '_hmr['+JSON.stringify(bundleKey)+\n              '].initModule('+JSON.stringify(fileKey(row.file))+', module);\\n(function(){\\n';\n            var footer = '\\n}).apply(this, arguments);\\n';\n\n            var inputMapCV = convert.fromSource(row.source);\n            var inputMap;\n            if (inputMapCV) {\n              inputMap = inputMapCV.toObject();\n              row.source = convert.removeComments(row.source);\n            } else {\n              inputMap = makeIdentitySourceMap(row.source, path.relative(basedir, row.file));\n            }\n\n            var node = new sm.SourceNode(null, null, null, [\n              new sm.SourceNode(null, null, null, header),\n              sm.SourceNode.fromStringWithSourceMap(row.source, new sm.SourceMapConsumer(inputMap)),\n              new sm.SourceNode(null, null, null, footer)\n            ]);\n\n            var result = node.toStringWithSourceMap();\n            row.source = result.code + convert.fromObject(result.map.toJSON()).toComment();\n\n            newTransformCache[row.file] = {\n              hash: hash,\n              transformedSource: row.source\n            };\n            return row;\n          };\n        }\n        if (useLocalSocketServer) {\n          moduleData[fileKey(row.file)] = {\n            isNew: isNew,\n            index: moduleMeta[fileKey(row.file)].index,\n            hash: hash,\n            source: originalSource,\n            parents: moduleMeta[fileKey(row.file)].parents,\n            deps: row.indexDeps || row.deps\n          };\n\n          // Buffer everything so we can get the websocket stuff done sooner\n          // without being slowed down by the final bundling.\n          rowBuffer.push(thunk);\n          next(null);\n        } else {\n          next(null, thunk());\n        }\n      }\n    }, function(done) {\n      var self = this;\n\n      transformCache = newTransformCache;\n      setNewModuleData(moduleData).then(function() {\n        return readManagerTemplate();\n      }).then(function(mgrTemplate) {\n        rowBuffer.forEach(function(thunk) {\n          self.push(thunk());\n        });\n\n        managerRow.source = mgrTemplate\n          .replace('null/*!^^moduleMeta*/', _.constant(JSON.stringify(moduleMeta)))\n          .replace('null/*!^^originalEntries*/', _.constant(JSON.stringify(originalEntries)))\n          .replace('null/*!^^updateUrl*/', _.constant(JSON.stringify(updateUrl)))\n          .replace('null/*!^^updateMode*/', _.constant(JSON.stringify(updateMode)))\n          .replace('null/*!^^supportModes*/', _.constant(JSON.stringify(supportModes)))\n          .replace('null/*!^^ignoreUnaccepted*/', _.constant(JSON.stringify(ignoreUnaccepted)))\n          .replace('null/*!^^updateCacheBust*/', _.constant(JSON.stringify(updateCacheBust)))\n          .replace('null/*!^^bundleKey*/', _.constant(JSON.stringify(bundleKey)))\n          .replace('null/*!^^sioPath*/', _.constant(JSON.stringify(sioPath)))\n          .replace('null/*!^^incPath*/', _.constant(JSON.stringify(incPath)));\n        self.push(managerRow);\n      }).then(done, done);\n    }));\n  }\n  setupPipelineMods();\n\n  bundle.on('reset', setupPipelineMods);\n  return em;\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/node_modules/browserify-hmr/lib/has.js":"'use strict';\n\nfunction has(object, propName) {\n  return Object.prototype.hasOwnProperty.call(object, propName);\n}\nmodule.exports = has;\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/node_modules/browserify-hmr/hmr-manager-template.js":"(function(global, _main, moduleDefs, cachedModules, _entries) {\n  'use strict';\n\n  var moduleMeta = null/*!^^moduleMeta*/;\n  var originalEntries = null/*!^^originalEntries*/;\n  var updateUrl = null/*!^^updateUrl*/;\n  var updateMode = null/*!^^updateMode*/;\n  var supportModes = null/*!^^supportModes*/;\n  var ignoreUnaccepted = null/*!^^ignoreUnaccepted*/;\n  var updateCacheBust = null/*!^^updateCacheBust*/;\n  var bundleKey = null/*!^^bundleKey*/;\n  var sioPath = null/*!^^sioPath*/;\n  var incPath = null/*!^^incPath*/;\n\n  if (!global._hmr) {\n    try {\n      Object.defineProperty(global, '_hmr', {value: {}});\n    } catch(e) {\n      global._hmr = {};\n    }\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(global._hmr, bundleKey)) {\n    // Temporary hack so requiring modules works before the _hmr values are\n    // correctly initialized.\n    global._hmr[bundleKey] = {initModule: function(){}};\n  }\n\n  var main = require(incPath);\n  var isFirstRun = main(\n    moduleDefs, cachedModules, moduleMeta, updateUrl,\n    updateMode, supportModes, ignoreUnaccepted, updateCacheBust, bundleKey,\n    sioPath ? require(sioPath) : null,\n    typeof __filename !== 'undefined' && __filename,\n    typeof __dirname !== 'undefined' && __dirname\n  );\n  if (isFirstRun) {\n    for (var i=0, len=originalEntries.length; i<len; i++) {\n      require(originalEntries[i]);\n    }\n  }\n}).call(\n  this,\n  typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},\n  arguments[3], arguments[4], arguments[5], arguments[6]\n);\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/node_modules/browserify-hmr/socket-server.js":"'use strict';\n\nvar net = require('net');\nvar _ = require('lodash');\nvar express = require('express');\nvar http = require('http');\nvar https = require('https');\nvar socketio = require('socket.io');\nvar has = require('./lib/has');\nvar readline = require('readline');\n\nfunction log() {\n  console.log.apply(console, [new Date().toTimeString(), '[HMR]'].concat(_.toArray(arguments)));\n}\n\nvar parent = new net.Socket({fd: 3});\nvar parentReadline = readline.createInterface({\n  input: parent,\n  output: process.stdout,\n  terminal: false\n});\n\nvar hostname, port, tlsoptions;\nvar currentModuleData = {};\n\nvar runServer = _.once(function() {\n  var app = express();\n  var server = tlsoptions ? https.Server(tlsoptions, app) : http.Server(app);\n  var io = socketio(server);\n  io.on('connection', function(socket) {\n    socket.on('sync', function(syncMsg) {\n      log('User connected, syncing');\n      var newModuleData = _.chain(currentModuleData)\n        .toPairs()\n        .filter(function(pair) {\n          return !has(syncMsg, pair[0]) || syncMsg[pair[0]].hash !== pair[1].hash;\n        })\n        .fromPairs()\n        .value();\n      var removedModules = _.chain(syncMsg)\n        .keys()\n        .filter(function(name) {\n          return !has(currentModuleData, name);\n        })\n        .value();\n      socket.emit('sync confirm', null);\n      if (Object.keys(newModuleData).length || removedModules.length)\n        socket.emit('new modules', {newModuleData: newModuleData, removedModules: removedModules});\n    });\n  });\n  server.listen(port, hostname, function() {\n    log('Listening on '+hostname+':'+port);\n  });\n  return io;\n});\n\nfunction sendToParent(data) {\n  parent.write(JSON.stringify(data)+'\\n');\n}\n\nvar uncommittedNewModuleData = {};\n\nparentReadline.on('line', function(line) {\n  var msg = JSON.parse(line);\n  if (msg.type === 'config') {\n    hostname = msg.hostname;\n    port = msg.port;\n    tlsoptions = msg.tlsoptions;\n  } else if (msg.type === 'newModule') {\n    uncommittedNewModuleData[msg.name] = msg.data;\n  } else if (msg.type === 'removedModules') {\n    sendToParent({type: 'confirmNewModuleData'});\n    _.assign(currentModuleData, uncommittedNewModuleData);\n    var io = runServer();\n\n    msg.removedModules.forEach(function(name) {\n      delete currentModuleData[name];\n    });\n    if (Object.keys(uncommittedNewModuleData).length || msg.removedModules.length) {\n      log('Emitting updates');\n      io.emit('new modules', {\n        newModuleData: uncommittedNewModuleData,\n        removedModules: msg.removedModules\n      });\n    }\n\n    uncommittedNewModuleData = {};\n  } else {\n    log('Unknow message type', msg.type);\n  }\n});\nparent.on('finish', function() {\n  process.exit(0);\n});\n","/home/travis/build/npmtest/node-npmtest-browserify-hmr/node_modules/browserify-hmr/lib/str-set.js":"'use strict';\n\nvar has = require('./has');\n\nfunction StrSet(other) {\n  this._map = {};\n  this._size = 0;\n  if (other) {\n    for (var i=0,len=other.length; i<len; i++) {\n      this.add(other[i]);\n    }\n  }\n}\nStrSet.prototype.add = function(value) {\n  if (!this.has(value)) {\n    this._map[value] = true;\n    this._size++;\n  }\n};\nStrSet.prototype.has = function(value) {\n  return has(this._map, value);\n};\nStrSet.prototype.del = function(value) {\n  if (this.has(value)) {\n    delete this._map[value];\n    this._size--;\n  }\n};\nStrSet.prototype.size = function() {\n  return this._size;\n};\nStrSet.prototype.forEach = function(cb) {\n  for (var value in this._map) {\n    if (has(this._map, value)) {\n      cb(value);\n    }\n  }\n};\nStrSet.prototype.some = function(cb) {\n  for (var value in this._map) {\n    if (has(this._map, value)) {\n      if (cb(value)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nStrSet.prototype.every = function(cb) {\n  return !this.some(function(x) {\n    return !cb(x);\n  });\n};\nStrSet.prototype.hasIntersection = function(otherStrSet) {\n  var value;\n  if (this._size < otherStrSet._size) {\n    return this.some(function(value) {\n      return otherStrSet.has(value);\n    });\n  } else {\n    var self = this;\n    return otherStrSet.some(function(value) {\n      return self.has(value);\n    });\n  }\n};\nStrSet.prototype.toArray = function() {\n  var arr = [];\n  this.forEach(function(value) {\n    arr.push(value);\n  });\n  return arr;\n};\n\nmodule.exports = StrSet;\n"}